# 线性查找

目标：在数组中找出指定的值。

假设我们有一个由普通对象组成的数组。如果用线性查找的话，我们需要遍历数组中的所有对象，并把它们逐个与我们想要找到的对象进行比较。如果比较的结果是相同的，那我们就停下来并返回当前的数组下标。如果不同，我们就继续与下一个对象比较，直到数组里的全部对象都被比较过了。

## 一个例子

假设我们有一个数字组成的数组 `[5, 2, 4, 7]`，然后我们想要看看数字 `2` 在不在数组里。

我们把数组中的第一个元素 `5` 拿来跟我们要找的数字 `2` 进行比较。显然它们是不同的，所以我们继续拿数组里的下一个元素出来比较。

我们把数组里的 `2` 和我们的目标数字 `2` 进行比较，然后发现它们是一样的。于是我们就可以停止遍历并返回 1，也就是 `2` 在数组里的下标。

## 代码

下面是用 Swift 实现的线性查找：

```swift
func linearSearch<T: Equatable>(_ array: [T], _ object: T) -> Int? {
  for (index, obj) in array.enumerated() where obj == object {
    return index
  }
  return nil
}
```

把代码放进 playground 就可以这样验证它：

```swift
let array = [5, 2, 4, 7]
linearSearch(array, 2) 	// 这会返回 1
```

## 性能

线性查找的时间复杂度是 **O(n)**。因为它把数组里的每一个元素都拿来与目标对象进行比较，所以它花费的时间与数组的长度成正比。在最坏的情况下，我们需要遍历数组里的全部元素。

最佳情况下的时间复杂度是 **O(1)**，但这种情况太少见了，因为这意味着我们要找的对象正好位于数组的最开头。运气好的时候可能会碰到，然而大多数时候你不会那么好运。平均情况，线性查找需要遍历数组里的一半对象。

## 相关信息

[维基百科上的线性查找](https://en.wikipedia.org/wiki/Linear_search)

*原文出自 [Patrick Balestra](http://www.github.com/BalestraPatrick)*
